# Copyright (c) 2020-2024 The PIVX Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

name: CI Actions for Fuzzybawls

on: [push, pull_request]
jobs:
  # Job to compile all dependencies deterministically using the depends build system.
  # Results are cached for repeat use across workflow runs.
  build_depends:
    name: Depends-${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      APT_BASE: ccache
      SDK_URL: https://bitcoincore.org/depends-sources/sdks
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: ARM 32-bit
            os: ubuntu-20.04
            host: arm-linux-gnueabihf
            packages: python3 g++-arm-linux-gnueabihf

          - name: AARCH64
            os: ubuntu-20.04
            host: aarch64-linux-gnu
            packages: python3 g++-aarch64-linux-gnu

          - name: Win64
            os: ubuntu-20.04
            host: x86_64-w64-mingw32
            packages: python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64

          - name: 32-bit + dash
            os: ubuntu-20.04
            host: i686-pc-linux-gnu
            packages: g++-multilib python3-zmq

          - name: x86_64 Linux
            os: ubuntu-20.04
            host: x86_64-unknown-linux-gnu
            packages: python3-zmq
            dep_opts: DEBUG=1

          - name: macOS 10.12
            os: ubuntu-20.04
            host: x86_64-apple-darwin16
            packages: cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python3-dev python3-setuptools
            XCODE_VERSION: 11.3.1
            XCODE_BUILD_ID: 11C505

    steps:
      - name: Get Source
        uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          sudo apt-get update
          sudo apt-get install --fix-missing --no-install-recommends --no-upgrade -qq "$APT_BASE" ${{ matrix.config.packages }}

      - name: depends cache files
        uses: actions/cache@v4
        with:
          path: |
            depends/built
            depends/sdk-sources
            depends/${{ matrix.config.host }}
          key: ${{ runner.os }}-depends-${{ matrix.config.host }}
          restore-keys: ${{ runner.os }}-depends-${{ matrix.config.host }}

      - name: Build Depends
        run: |
          PATH=$(echo $PATH | tr ':' "\n" | sed '/\/opt\/python/d' | tr "\n" ":" | sed "s|::|:|g")
          # Add llvm-symbolizer directory to PATH. Needed to get symbolized stack traces from the sanitizers.
          PATH=$PATH:/usr/lib/llvm-6.0/bin/
          export PATH

          mkdir -p depends/SDKs depends/sdk-sources

          OSX_SDK_BASENAME="Xcode-${{ matrix.config.XCODE_VERSION }}-${{ matrix.config.XCODE_BUILD_ID }}-extracted-SDK-with-libcxx-headers.tar.gz"
          OSX_SDK_PATH="depends/sdk-sources/${OSX_SDK_BASENAME}"

          if [ -n "${{ matrix.config.XCODE_VERSION }}" ] && [ ! -f "$OSX_SDK_PATH" ]; then
            curl --location --fail "${SDK_URL}/${OSX_SDK_BASENAME}" -o "$OSX_SDK_PATH"
          fi

          if [ -n "${{ matrix.config.XCODE_VERSION }}" ] && [ -f "$OSX_SDK_PATH" ]; then
            tar -C "depends/SDKs" -xf "$OSX_SDK_PATH"
          fi

          if [[ ${{ matrix.config.host }} = *-mingw32 ]]; then
            BIN=$(which ${{ matrix.config.host }}-g++-posix)
            sudo update-alternatives --set ${{ matrix.config.host }}-g++ $BIN
          fi

          if [ -z "${{ matrix.config.no_depends }}" ]; then
            make -j2 -C depends HOST=${{ matrix.config.host }} ${{ matrix.config.dep_opts }}
          fi

  # Autotools based build job for depends based builds.
  # These builds use cached depends results to satisfy dependencies.
  build_depends_wallet:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    needs: build_depends
    env:
      APT_BASE: ccache
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_SIZE: 900M
      CCACHE_COMPRESS: 1
      WINEDEBUG: fixme-all
      BOOST_TEST_RANDOM: 1 # random seed based on the current time
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: ARM 32-bit [GOAL:install]
            id: ARM32-build
            os: ubuntu-20.04
            host: arm-linux-gnueabihf
            packages: python3 g++-arm-linux-gnueabihf
            unit_tests: false
            functional_tests: false
            goal: install
            # -Wno-psabi is to disable ABI warnings: "note: parameter passing for argument of type ... changed in GCC 7.1"
            # This could be removed once the ABI change warning does not show up by default
            BITCOIN_CONFIG: "--with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --disable-online-rust CXXFLAGS=-Wno-psabi LDFLAGS=-static-libstdc++"

          - name: AARCH64 [GOAL:install]
            id: ARM64-build
            os: ubuntu-20.04
            host: aarch64-linux-gnu
            packages: python3 g++-aarch64-linux-gnu
            unit_tests: false
            functional_tests: false
            goal: install
            BITCOIN_CONFIG: "--with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --disable-online-rust LDFLAGS=-static-libstdc++"

          - name: Win64 [GOAL:deploy]
            id: Win64-build
            os: ubuntu-20.04
            host: x86_64-w64-mingw32
            packages: python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64
            unit_tests: false
            functional_tests: false
            symbol_check: true
            goal: deploy
            BITCOIN_CONFIG: "--with-gui=auto --enable-reduce-exports --disable-online-rust"

          - name: x86_64 Linux [GOAL:install]
            id: Linux-x86_64-build
            os: ubuntu-20.04
            host: x86_64-unknown-linux-gnu
            packages: python3-zmq
            unit_tests: false
            functional_tests: false
            goal: install
            BITCOIN_CONFIG: "--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --disable-online-rust LDFLAGS=-static-libstdc++"

          - name: macOS 10.12 [GOAL:deploy]
            id: macOS10.12-build
            os: ubuntu-20.04
            host: x86_64-apple-darwin16
            packages: cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python3-dev python3-setuptools
            XCODE_VERSION: 11.3.1
            XCODE_BUILD_ID: 11C505
            unit_tests: false
            functional_tests: false
            symbol_check: true
            goal: deploy
            BITCOIN_CONFIG: "--enable-gui --enable-reduce-exports --enable-werror --disable-online-rust"

    steps:
      - name: Get Source
        uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          sudo apt-get update
          sudo apt-get install --fix-missing --no-install-recommends --no-upgrade -qq "$APT_BASE" ${{ matrix.config.packages }}

      - name: depends cache files
        if: matrix.config.no_depends != 1
        uses: actions/cache@v4
        with:
          path: |
            depends/built
            depends/sdk-sources
            depends/${{ matrix.config.host }}
          key: ${{ runner.os }}-depends-${{ matrix.config.host }}
          restore-keys: ${{ runner.os }}-depends-${{ matrix.config.host }}

      - name: ccache cache files
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ${{ runner.os }}-depbuild-${{ matrix.config.id }}-ccache
          restore-keys: ${{ runner.os }}-depbuild-${{ matrix.config.id }}-ccache

      - name: Configure Wallet
        run: |
          PATH=$(echo $PATH | tr ':' "\n" | sed '/\/opt\/python/d' | tr "\n" ":" | sed "s|::|:|g")
          # Add llvm-symbolizer directory to PATH. Needed to get symbolized stack traces from the sanitizers.
          PATH=$PATH:/usr/lib/llvm-6.0/bin/
          export PATH

          mkdir -p depends/SDKs depends/sdk-sources

          OSX_SDK_BASENAME="Xcode-${{ matrix.config.XCODE_VERSION }}-${{ matrix.config.XCODE_BUILD_ID }}-extracted-SDK-with-libcxx-headers.tar.gz"
          OSX_SDK_PATH="depends/sdk-sources/${OSX_SDK_BASENAME}"

          if [ -n "${{ matrix.config.XCODE_VERSION }}" ] && [ ! -f "$OSX_SDK_PATH" ]; then
            curl --location --fail "${SDK_URL}/${OSX_SDK_BASENAME}" -o "$OSX_SDK_PATH"
          fi

          if [ -n "${{ matrix.config.XCODE_VERSION }}" ] && [ -f "$OSX_SDK_PATH" ]; then
            tar -C "depends/SDKs" -xf "$OSX_SDK_PATH"
          fi

          if [[ ${{ matrix.config.host }} = *-mingw32 ]]; then
            BIN=$(which ${{ matrix.config.host }}-g++-posix)
            sudo update-alternatives --set ${{ matrix.config.host }}-g++ $BIN
            sudo update-binfmts --import /usr/share/binfmts/wine
          fi

          if [[ ${{ matrix.config.os }} = ubuntu* ]]; then
            OUTDIR_PATH="$GITHUB_WORKSPACE/$GITHUB_RUN_NUMBER-${{ matrix.config.host }}"
            BITCOIN_CONFIG_ALL="--disable-dependency-tracking --prefix=$GITHUB_WORKSPACE/depends/${{ matrix.config.host }} --bindir=$OUTDIR_PATH/bin --libdir=$OUTDIR_PATH/lib"
          fi

          if [ "${{ matrix.config.unit_tests }}" = "true" ] || [ "${{ matrix.config.functional_tests }}" = "true" ]; then
            ./params/install-params.sh
          fi

          echo ::group::Autogen
          ./autogen.sh
          echo ::endgroup::

          mkdir build && cd build

          echo ::group::Configure
          ../configure --cache-file=config.cache $BITCOIN_CONFIG_ALL ${{ matrix.config.BITCOIN_CONFIG }} || ( cat config.log && false)
          echo ::endgroup::

          echo ::group::Distdir
          make distdir VERSION=${{ matrix.config.host }}
          echo ::endgroup::

          cd pivx-${{ matrix.config.host }}

          echo ::group::Configure
          ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL ${{ matrix.config.BITCOIN_CONFIG }} || ( cat config.log && false)
          echo ::endgroup

      - name: Build Wallet
        run: |
          cd build/pivx-${{ matrix.config.host }}/
          make -j2 ${{ matrix.config.goal }} || ( echo "Build failure. Verbose build follows." && make ${{ matrix.config.goal }} V=1 ; false )

      - name: Create Tar Archive
        run: |
          if [[ ${{ matrix.config.host }} != *apple* ]]; then
            PIVXD_PATH=$(find build/pivx-${{ matrix.config.host }}/ -name pivxd)
            PIVX_CLI_PATH=$(find build/pivx-${{ matrix.config.host }}/ -name pivx-cli)
            if [[ -f "$PIVXD_PATH" ]]; then
              strip "$PIVXD_PATH"
            else
              echo "File pivxd does not exist at path $PIVXD_PATH"
            fi
            if [[ -f "$PIVX_CLI_PATH" ]]; then
              strip "$PIVX_CLI_PATH"
            else
              echo "File pivx-cli does not exist at path $PIVX_CLI_PATH"
            fi
          fi
          tar -hcvf ${{ matrix.config.host }}-built.tar \
            build/pivx-${{ matrix.config.host }}/share/rpcauth \
            build/pivx-${{ matrix.config.host }}/params/ \
            "$PIVXD_PATH" \
            "$PIVX_CLI_PATH" \
            build/pivx-${{ matrix.config.host }}/src/test/data/asmap.raw

  # Create a pre-release using the uploaded artifacts.
  create_pre_release:
    name: Create Pre-Release
    runs-on: ubuntu-latest
    needs: build_depends_wallet
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "pre-release-${{ github.run_number }}"
          release_name: "Pre-Release ${{ github.run_number }}"
          draft: false
          prerelease: true

      - name: Upload Artifacts to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/pivx-*.tar
          asset_name: pivx-${{ github.run_number }}.tar
          asset_content_type: application/x-tar
